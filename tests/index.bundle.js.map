{"version":3,"file":"index.bundle.js","sources":["index.js"],"sourcesContent":["import Spirit from '..'\nimport { createScope } from 'gardens'\n\nconst garden = createScope( 'string-spirits' )\ngarden.info( 'Beginning tests' )\n\nconst star = new Spirit( '*' )\ngarden.assert( star.match( '' ) )\ngarden.assert( star.match( 'x' ) )\ngarden.assert( star.match( 'hello' ) )\ngarden.assert( star.match( 'ahelloz' ) )\n\nconst az = new Spirit( 'a*z' )\ngarden.assert( az.match( 'az' ) )\ngarden.assert( az.match( 'ahelloz' ) )\ngarden.deny( az.match( 'x' ) )\ngarden.deny( az.match( 'azx' ) )\ngarden.deny( az.match( 'xaz' ) )\n\nconst innermark = new Spirit( 'a?z' )\ngarden.assert( innermark.match( 'axz' ) )\ngarden.deny( innermark.match( 'abcz' ) )\ngarden.deny( innermark.match( 'az' ) )\n\nconst endmark = new Spirit( 'az?' )\ngarden.assert( endmark.match( 'az' ) )\ngarden.assert( endmark.match( 'azx' ) )\ngarden.deny( endmark.match( 'azxy' ) )\ngarden.deny( endmark.match( 'xazy' ) )\n\nconst single = new Spirit( '?' )\ngarden.assert( single.match( '' ) )\ngarden.assert( single.match( 'x' ) )\n\nconst spirits = [ star, az, innermark, endmark, single ]\ngarden.assert_eq( Spirit.bestMatch( spirits, 'a' ), single )\ngarden.assert_eq( Spirit.bestMatch( spirits, 'az' ), endmark )\ngarden.assert_eq( Spirit.bestMatch( spirits, 'axz' ), innermark )\ngarden.assert_eq( Spirit.bestMatch( spirits, 'axyz' ), az )\ngarden.assert_eq( Spirit.bestMatch( spirits, 'baxyz' ), star )\n\n// This test is annoying, but the feature works so screw it for now.\n// const strings = [ 'a', 'az', 'axz', 'axyz', 'baxyz' ]\n// const spiritMap = Spirit.map( spirits, strings )\n//\n// for ( let [ key, value ] in spiritMap ) {\n//   matches.get( key ) === value\n// }\n//\n// const matches = new Map([\n//   [ 'a', [ star, single ] ],\n//   [ 'az', [ star, az, endmark ] ],\n//   [ 'axz', [ star, az, innermark ] ],\n//   [ 'axyz', [ star, az ] ],\n//   [ 'baxyz', [ star ] ]\n// ])\n\ngarden.info( 'Done! Tests passed!' )\n"],"names":["createScope"],"mappings":"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"}